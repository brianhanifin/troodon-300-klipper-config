[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True  ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 150   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0     ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 20    ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 2     ; the value to retract while PAUSE
variable_cancel_retract   : 5     ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 300   ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 300   ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract  : False  ; use fw_retraction instead of the manual version [True/False]
gcode:


# [gcode_macro CANCEL]
# variable_default_allow_park: False
# variable_default_retract: 5
# gcode:
#   LIGHTS_PRESET PRESET=WARNING

#   SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}   ; set timeout back to configured value

#   # Set default values.
#   {% set allow_park = default_allow_park %}
#   {% set retract = default_retract %}
#   {% set park_x = "" %}
#   {% set park_y = "" %}

#   {% set client_variables_set = printer['gcode_macro _CLIENT_VARIABLE'] is defined %}
#   {% if client_variables_set %}
#     {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  
#     ##### get user parameters when defined #####
#     {% set allow_park = client.park_at_cancel|lower == 'true' %}
#     {% set retract = client.cancel_retract|default(default_retract)|abs %}
  
#     ##### define park position #####
#     {% if client.park_at_cancel_x is not none %}
#       {% set park_x = "X=" + client.park_at_cancel_x|string %}
#     {% endif %}
#     {% if client.park_at_cancel_y is not none %}
#       {% set park_y = "Y=" + client.park_at_cancel_y|string %}
#     {% endif %}
#     {% set custom_park = (park_x|length > 0 or park_y|length > 0) %}
#     ##### end of definitions #####
#   {% endif %}
#   RESPOND PREFIX="CANCEL " MSG="allow_park={allow_park} retract={retract} park_x={park_x} park_y={park_y}"

#   {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %}
#     _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y}
#   {% endif %}

#   _CLIENT_RETRACT LENGTH={retract}
#   PAUSE
#   COOLDOWN
#   CANCEL_PRINT_BASE


# [gcode_macro CANCEL_PRINT]
# rename_existing: CANCEL_PRINT_BASE
# gcode:
#   CANCEL {rawparams}
# [gcode_macro PRINT_CANCEL]
# gcode:
#   CANCEL {rawparams}

# # Source: https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/pause_resume_filament.html
# [pause_resume]
# [display_status]

# [gcode_macro PAUSE]
# rename_existing: BASE_PAUSE
# variable_default_z_hop: 5
# gcode:
#   {% set preset = params.LIGHTS_PRESET|default("WAITING") %}
#   LIGHTS_PRESET PRESET={preset}

#   # Parameters
#   {% set z = params.Z|default(default_z_hop)|int %}                                       ; z hop amount

#   {% if printer['pause_resume'].is_paused|int == 0 %}
#     SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
#     SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

#     SET_FILAMENT_SENSOR SENSOR=filament_e0 ENABLE=0                                      ; disable filament sensor
#     SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
#     BASE_PAUSE                                                                           ; pause print
#     {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
#       G91                                                                                ; relative positioning
#       G1 Z{z} F900                                                                       ; raise Z up by z hop amount
#     {% else %}
#       { action_respond_info("Pause zhop exceeds maximum Z height.") }                    ; if z max is exceeded, show message and set zhop value for resume to 0
#       SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
#     {% endif %}
#     G90                                                                                  ; absolute positioning
#     G1 X{printer.toolhead.axis_maximum.x+5} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
#     SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
#     M104 S0                                                                              ; turn off hotend

#     BASE_PAUSE

#     SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
#   {% endif %}

# [gcode_macro PRINT_PAUSE]
# gcode:
#   PAUSE {rawparams}
# [gcode_macro PAUSE_PRINT]
# gcode:
#   PAUSE {rawparams}

# [gcode_macro RESUME]
# rename_existing: BASE_RESUME
# variable_zhop: 0
# variable_etemp: 0
# gcode:
#   # Parameters
#   {% set e = params.E|default(2.5)|int %}                                                ; hotend prime amount (in mm)

#   {% if printer['pause_resume'].is_paused|int == 1 %}
#     SET_FILAMENT_SENSOR SENSOR=filament_e0 ENABLE=1                                      ; enable filament sensor
#     #INITIAL_RGB                                                                         ; reset LCD color
#     SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}          ; set timeout back to configured value
#     {% if etemp > 0 %}
#       LIGHTS_PRESET PRESET=HEATING
#       M109 S{etemp|int}                                                                  ; wait for hotend to heat back up
#       LIGHTS_ON
#     {% endif %}
#     RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                             ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
#     G91                                                                                  ; relative positioning
#     M83                                                                                  ; relative extruder positioning
#     {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
#       G1 Z{zhop * -1} E{e} F900                                                          ; prime nozzle by E, lower Z back down
#     {% else %}
#       G1 Z{zhop * -1} F900                                                               ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
#     {% endif %}
#     RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                                  ; restore position
#     BASE_RESUME                                                                          ; resume print
#   {% endif %}

# [gcode_macro PRINT_RESUME]
# gcode:
#   RESUME {rawparams}
# [gcode_macro RESUME_PRINT]
# gcode:
#   RESUME {rawparams}
